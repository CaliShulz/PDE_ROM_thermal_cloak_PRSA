%% SS_reduction.m
% Solve steady-state problem for the selected mesh ( need data structures generated by assemble_problem.m)
% Output figures in archive_sim

% To change dimensions of snapshot set or input parameters range modify 
% mu_train_DImension, FOM.mu_max , FOM.mu_min


clear all
clc
close all

sslash = path_setup() ; % setup path 

mesh_name = 'mesh_circular_cloak';
load(strcat('archive_data',sslash,'FOM_setup_',mesh_name));

%% TRAINING
% use three parameters [ diffusivity source strength T_dir beta_g]
% add gradient control norm to parameters (it is fixed to constant value)
FOM.P      = 4;
FOM.mu_max = [5 500     200     1E-10];
FOM.mu_min = [1 15000     0     1E-10];

mu_train_Dimension = 50; 
mu_cube            = lhsdesign(mu_train_Dimension, FOM.P); % normalized design
mu_train           = bsxfun(@plus,FOM.mu_min,bsxfun(@times,mu_cube,(FOM.mu_max-FOM.mu_min)));


% save basis vector and matrices for affine evaluation
FOM.A_d_0       = FOM.A_d;
FOM.A_d_ocp_0   = FOM.A_d_ocp;
FOM.A_d_dir_0   = FOM.A_d_dir;

FOM.F_0     = FOM.F;
FOM.F_ocp_0 = FOM.F_ocp;



TrainingStart = tic;
X_opt = [];
[N_z,~]   = size(FOM.A_d);
[N_q,N_u] = size(FOM.B);

FOM.beta   = 1e-7;

for jj = 1:size(mu_train,1)
    
    mu_test = mu_train(jj,:);
    
    [FOM] = evaluate_theta_terms(mu_test,FOM);
    [FOM] = assemble_ato_SS(FOM);

    
    tic
    x_opt = FOM.A_big \ FOM.F_big;
    toc
    
    X_opt = [X_opt x_opt];
    fprintf('Training simulation %d of %d ',[jj,mu_train_Dimension]);
    
end

dataset.Z_ref   = X_opt(1:N_z,:);
dataset.Q_opt   = X_opt(N_z         + (1:N_q),:);
dataset.P_opt   = X_opt((N_z+N_q)   + (1:N_q),:);
dataset.U_opt   = X_opt((N_z+2*N_q) + (1:N_u),:);
train_Time = toc(TrainingStart); 

%% Compare ROM vs FOM for selected test case
close all

% Solve test FOM
mu_test = [3.5 10000 0 1E-10];

tic;
[FOM] = evaluate_theta_terms(mu_test,FOM)
[FOM] = assemble_ato_SS(FOM)
x_opt = FOM.A_big \ FOM.F_big;
tFOM = toc;

q_free_in = (FOM.A_d_ocp+FOM.A_d_robin_ocp) \ (FOM.F_ocp+FOM.F_dir);


test_case.FOM.z = x_opt(1:N_z,1);
test_case.FOM.q = x_opt(N_z         + (1:N_q),1);
test_case.FOM.p = x_opt((N_z+N_q)   + (1:N_q), 1);
test_case.FOM.u = x_opt((N_z+2*N_q) + (1:N_u),1);

% Build reduced order model
tol_r  = 1E-7;
tol_pq = 1E-7;
tol_u  = 1E-7;

[ROM] = build_ROM(1E-7,1E-7,1E-7,FOM,dataset,1,"ato")
V_N.V_u   = ROM.V_u;
V_N.V_pq  = ROM.V_pq;
V_N.V_ref = ROM.V_ref;

[ROM] = project_system_RB(V_N,ROM,FOM)


% Time Online Phase
tROM = tic;
[ROM] = evaluate_theta_terms(mu_test,ROM);
[ROM] = assemble_ato_SS(ROM)
x_opt = ROM.A_big \ ROM.F_big;
toc(tROM)

[~,N_pq_ROM]  = size(ROM.V_pq);
[~,N_ref_ROM] = size(ROM.V_ref);
[~,N_u_ROM]   = size(ROM.V_u);

test_case.ROM.z = x_opt(1:N_ref_ROM,1);
test_case.ROM.q = x_opt(N_ref_ROM              + (1:N_pq_ROM), 1);
test_case.ROM.p = x_opt((N_ref_ROM+N_pq_ROM)   + (1:N_pq_ROM), 1);
test_case.ROM.u = x_opt((N_ref_ROM+2*N_pq_ROM) + (1:N_u_ROM),  1);


% Plots ROM last simulation results
MESH         = FOM.MESH;
vertices     = MESH.vertices;
elements     = MESH.elements;

z_ref_ROM    = ROM.V_ref*test_case.ROM.z;
z_ref_FOM    = test_case.FOM.z;

q_opt_ROM    = ROM.T_dir*ones(length(vertices),1);  % Cambiare!
q_opt_FOM    = q_opt_ROM;

q_opt_FOM(FOM.nodes_ocp_in,1) = test_case.FOM.q;
q_opt_ROM(FOM.nodes_ocp_in,1) = ROM.V_pq * test_case.ROM.q;

q_free                     = q_opt_FOM;
q_free(FOM.nodes_ocp_in,1) = q_free_in;

u_opt_FOM    = test_case.FOM.u;
u_opt_ROM    = ROM.V_u * test_case.ROM.u;

% Error norms
% state error weighted with M_ocp, M_obs

u_error_n     = [];
q_error_n     = [];
p_error_n     = [];
z_error_n     = [];
track_error_n = [];
J_error_n     = [];

J_FOM = 0.5* ( FOM.beta   * test_case.FOM.u' * FOM.M_u * test_case.FOM.u + ...
               mu_test(4) * test_case.FOM.u' * FOM.A_u * test_case.FOM.u + ...
               (test_case.FOM.q - FOM.E*test_case.FOM.z)' * FOM.M_obs * (test_case.FOM.q - FOM.E*test_case.FOM.z));
               

tROM          = [];


track_error_FOM_free = transpose(q_free_in - FOM.E*test_case.FOM.z) * FOM.M_obs * (q_free_in - FOM.E*test_case.FOM.z);

for jj = 1:max([N_pq_ROM,N_ref_ROM,N_u_ROM])
    
    V_N.V_u   = ROM.V_u(:,1:min([N_u_ROM,jj]));
    V_N.V_pq  = ROM.V_pq(:,1:min([N_pq_ROM,jj]));
    V_N.V_ref = ROM.V_ref(:,1:min([N_ref_ROM,jj]));
    
    [ROM] = project_system_RB(V_N,ROM,FOM);

    tic;
    [ROM] = evaluate_theta_terms(mu_test,ROM);
    [ROM] = assemble_ato_SS(ROM);
    x_opt = ROM.A_big \ ROM.F_big;
    tROM = [ tROM toc];

    [~,N_pq_temp]  = size(V_N.V_pq);
    [~,N_ref_temp] = size(V_N.V_ref);
    [~,N_u_temp]   = size(V_N.V_u);

    z_ref = x_opt(1:N_ref_temp,1);
    q_opt = x_opt(N_ref_temp              + (1:N_pq_temp), 1);
    p_opt = x_opt((N_ref_temp+N_pq_temp)   + (1:N_pq_temp), 1);
    u_opt = x_opt((N_ref_temp+2*N_pq_temp) + (1:N_u_temp),  1);
   
    
    z_norm_FOM  =diag(transpose(test_case.FOM.z) * FOM.M      * test_case.FOM.z);
    q_norm_FOM  =diag(transpose(test_case.FOM.q) * FOM.M_ocp  * test_case.FOM.q);
    p_norm_FOM  =diag(transpose(test_case.FOM.p) * FOM.M_ocp  * test_case.FOM.p);
    u_norm_FOM  =diag(transpose(test_case.FOM.u) * FOM.M_u    * test_case.FOM.u);
    
    track_error_FOM = transpose(test_case.FOM.q - FOM.E*test_case.FOM.z) * FOM.M_obs * (test_case.FOM.q - FOM.E*test_case.FOM.z);
    track_error_ROM = (V_N.V_pq*q_opt - FOM.E*V_N.V_ref*z_ref)' * FOM.M_obs * (V_N.V_pq*q_opt - FOM.E*V_N.V_ref*z_ref);
    
    
    z_error = diag(transpose(test_case.FOM.z - V_N.V_ref * z_ref) * FOM.M      * (test_case.FOM.z - V_N.V_ref * z_ref));
    q_error = diag(transpose(test_case.FOM.q - V_N.V_pq  * q_opt) * FOM.M_ocp  * (test_case.FOM.q - V_N.V_pq  * q_opt));
    p_error = diag(transpose(test_case.FOM.p - V_N.V_pq  * p_opt) * FOM.M_ocp  * (test_case.FOM.p - V_N.V_pq  * p_opt));
    u_error = diag(transpose(test_case.FOM.u - V_N.V_u   * u_opt) * FOM.M_u    * (test_case.FOM.u - V_N.V_u   * u_opt));

    u_error_rel = u_error / u_norm_FOM;
    q_error_rel = q_error / q_norm_FOM;
    p_error_rel = p_error / p_norm_FOM;
    z_error_rel = z_error / z_norm_FOM;
    
    track_error_rel = abs(track_error_FOM-track_error_ROM)  / track_error_FOM; 
    
    J_ROM = 0.5* ( FOM.beta   * (V_N.V_u*u_opt)' * FOM.M_u * (V_N.V_u*u_opt) + ...
                   mu_test(4) * (V_N.V_u*u_opt)' * FOM.A_u * (V_N.V_u*u_opt) + ...
               (V_N.V_pq*q_opt- FOM.E*V_N.V_ref*z_ref)' * FOM.M_obs *(V_N.V_pq*q_opt- FOM.E*V_N.V_ref*z_ref));
    J_error_rel = abs(J_ROM-J_FOM) / J_FOM;
    
    u_error_n     = [u_error_n u_error_rel];
    q_error_n     = [q_error_n q_error_rel];
    p_error_n     = [p_error_n p_error_rel];
    z_error_n     = [z_error_n z_error_rel];
    track_error_n = [track_error_n track_error_rel];
    J_error_n     = [J_error_n J_error_rel];
    
end

% Gradient norm
disp("control gradient norm")
transpose(u_opt_FOM)*FOM.A_u*u_opt_FOM
max(u_opt_FOM) - min(u_opt_FOM)



% Setup fonts for plots
font_label = 18;
font_title = 19;
font_legend = 10;


fonts_data.font_title = font_title;
fonts_data.font_label = font_label;

% Setup figures
fig = gobjects(0);
set(0,'DefaultFigureVisible','off');



% Plots

% Reference reduction

%FOM
FOM_ref_data.name = "reference_fom";
FOM_ref_data.y    = z_ref_FOM;
FOM_ref_data.mesh = MESH;

FOM_ref_plot_data.limits = [min(z_ref_FOM(:)) max(z_ref_FOM(:))];
FOM_ref_plot_data.title  = "Reference state (FOM)";

fig(length(fig)+1)     = figure;
[fig] = plot_field(fig,FOM_ref_data,FOM_ref_plot_data,fonts_data)





%ROM
ROM_ref_data.name = "reference_rom";
ROM_ref_data.y    = z_ref_ROM;
ROM_ref_data.mesh = MESH;

ROM_ref_plot_data.limits = [min(z_ref_FOM(:)) max(z_ref_FOM(:))];
ROM_ref_plot_data.title  = "Reference state (ROM)";

fig(length(fig)+1)     = figure;
[fig] = plot_field(fig,ROM_ref_data,ROM_ref_plot_data,fonts_data)



% State reduction
[state_elements,state_boundaries] = get_reduced_mesh(FOM.MESH,FOM.nodes_ocp);
FOM_state_data.reduced.vertices     = MESH.vertices(:,FOM.nodes_ocp);
FOM_state_data.reduced.elements     = state_elements; 
FOM_state_data.reduced.indexes      = FOM.nodes_ocp;


FOM_state_data.name = "state_fom";
FOM_state_data.y    = q_opt_FOM;

FOM_state_plot_data.limits = [min(z_ref_FOM(:)) max(z_ref_FOM(:))];
FOM_state_plot_data.title  = "State (FOM)";

fig(length(fig)+1)     = figure;
[fig] = plot_field(fig,FOM_state_data,FOM_state_plot_data,fonts_data)


ROM_state_data      = FOM_state_data;
ROM_state_data.name = "state_rom";
ROM_state_data.y    = q_opt_ROM;

ROM_state_plot_data = FOM_state_plot_data;
ROM_state_plot_data.title  = "State (ROM)";

fig(length(fig)+1)     = figure;
[fig] = plot_field(fig,ROM_state_data,ROM_state_plot_data,fonts_data)




% Perturbed uncontrolled system

unc_state_data      = FOM_state_data;
unc_state_data.name = "state_unc";
unc_state_data.y    = q_free;

unc_state_plot_data = FOM_state_plot_data;
unc_state_plot_data.title  = "Perturbed temperature ";

fig(length(fig)+1)     = figure;
[fig] = plot_field(fig,unc_state_data,unc_state_plot_data,fonts_data)



% Control reduction

%FOM
FOM_control_data.name = "control_fom";
u_temp                = zeros(length(vertices),1);
u_temp(FOM.control_basis_index) = u_opt_FOM;
FOM_control_data.y    = u_temp;

FOM_control_plot_data.title = "Control (FOM)";
FOM_control_plot_data.limits = [min(test_case.FOM.u(:)) max(test_case.FOM.u(:))];
FOM_control_plot_data.dom_limits = [ -0.41 0.41 -0.41 0.41];  % comment to get full domain


control_basis_index = FOM.control_basis_index;
[reduced_control_elements,~] = get_reduced_mesh(MESH,control_basis_index);
FOM_control_data.reduced.vertices     = MESH.vertices(:,control_basis_index);
FOM_control_data.reduced.elements     = reduced_control_elements; 
FOM_control_data.reduced.indexes      = control_basis_index;

fig(length(fig)+1)     = figure;
[fig] = plot_field(fig,FOM_control_data,FOM_control_plot_data,fonts_data);


%ROM
ROM_control_data      = FOM_control_data;
ROM_control_data.name = "control_rom";
u_temp(FOM.control_basis_index) = u_opt_ROM;
ROM_control_data.y = u_temp;

ROM_control_plot_data = FOM_control_plot_data;
ROM_control_plot_data.title = "Control (ROM)";
fig(length(fig)+1)     = figure;
[fig] = plot_field(fig,ROM_control_data,ROM_control_plot_data,fonts_data);
hold on


% Control FULL figure FOM only

FOM_control_plot_data = rmfield( FOM_control_plot_data , 'dom_limits' ) ;
fig(length(fig)+1)     = figure;
[fig] = plot_field(fig,FOM_control_data,FOM_control_plot_data,fonts_data);
fig(length(fig)).Name = 'control_full_fig';
hold on

switch FOM.name
    
    case 'circular'
        get_grey_plate(0.2);
    case 'disconnected'
        get_grey_plate(0.2);
    case 'boar'
        get_grey_scrofa(FOM.shape.obs_vert)
        
end

% Tracking error 
%FOM
tracking_error_field   = test_case.FOM.q - FOM.E * test_case.FOM.z;
tracking_error_norm    = tracking_error_field' * FOM.M_obs * tracking_error_field;
FOM_tracking_data.name = "tracking FOM";
tracking_error_small   = FOM.E_obs * tracking_error_field;
y_temp                 = zeros(length(vertices),1);
y_temp(FOM.observation_basis_index) = tracking_error_small;

FOM_tracking_data.y    = y_temp;
% 
FOM_tracking_plot_data.title  = "Tracking error (FOM)";
symmetric_lim = max(abs(tracking_error_small(:)));
FOM_tracking_plot_data.limits = [-symmetric_lim symmetric_lim];
% 
% % Observation mesh
% 
[reduced_observation_elements]         = get_reduced_mesh(MESH,FOM.observation_basis_index);
FOM_tracking_data.reduced.vertices     = MESH.vertices(:,FOM.observation_basis_index);
FOM_tracking_data.reduced.elements     = reduced_observation_elements; 
FOM_tracking_data.reduced.indexes      = FOM.observation_basis_index;

fig(length(fig)+1)     = figure;
[fig] = plot_field(fig,FOM_tracking_data,FOM_tracking_plot_data,fonts_data);
hold on


switch FOM.name
    
    case 'circular'
        get_grey_obs(0.4,0.2);
    case 'disconnected'
        get_grey_obs(0.4,0.2);
    case 'boar'
        get_grey_obs_scrofa(FOM.shape.outer_vert,FOM.shape.obs_vert);
        
end


%ROM

ROM_tracking_data      = FOM_tracking_data;
ROM_tracking_data.name = "tracking ROM";
y_temp(FOM.observation_basis_index) = FOM.E_obs * ( ROM.V_pq*test_case.ROM.q - FOM.E * ROM.V_ref*test_case.ROM.z);
ROM_tracking_data.y    = y_temp;

ROM_tracking_plot_data       = FOM_tracking_plot_data;
ROM_tracking_plot_data.title = "Tracking error (ROM)";

fig(length(fig)+1)     = figure;
[fig] = plot_field(fig,ROM_tracking_data,ROM_tracking_plot_data,fonts_data);
hold on

switch FOM.name
    
    case 'circular'
        get_grey_obs(0.4,0.2);
    case 'disconnected'
        get_grey_obs(0.4,0.2);
    case 'boar'
        get_grey_obs_scrofa(FOM.shape.outer_vert,FOM.shape.obs_vert);
        
end


area_omega_obs = sum(FOM.E_obs*FOM.E*FOM.F_dom);
MTE_unc   = sqrt(track_error_FOM_free/area_omega_obs);
MTE_opt   = sqrt(track_error_FOM/area_omega_obs);

eta_cloak = (abs(MTE_unc-MTE_opt)) / MTE_unc; 


% Reduction error plots

% track error norm
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "track_error_rom_fom";
semilogy(track_error_n,'o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{track_{ROM} - track_{FOM}}{track_{FOM}}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Reference tracking error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square
% cost error 
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "cost_error_rom_fom";
semilogy(J_error_n,'o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{J_{ROM} - J_{FOM}}{J_{FOM}}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Cost reduction error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square

% Reference reduction error
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "ref_rom_fom";
semilogy(z_error_n,'o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{||\mathbf{z}_h - V_{r} \mathbf{z}_N ||_{M}^2}{||\mathbf{z}_h ||_{M}^2}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Reference reduction error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square

% State reduction error
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "state_rom_fom";
semilogy(q_error_n,'o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{||\mathbf{q}_h - V_{pq} \mathbf{q}_N ||_{M}^2}{||\mathbf{q}_h ||_{M}^2}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('State reduction error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square

% Control reduction error
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "control_rom_fom";
semilogy(u_error_n,'o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{||\mathbf{u}_h - V_{u} \mathbf{u}_N ||_{M}^2}{||\mathbf{u}_h ||_{M}^2}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Control reduction error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square


% Adjoint reduction error
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "adjoint_rom_fom";
semilogy(p_error_n,'o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{||\mathbf{p}_h - V_{pq} \mathbf{p}_N ||_{M}^2}{||\mathbf{p}_h ||_{M}^2}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Adjoint reduction error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square

% Computational Speedup
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "speedup_rom_fom";
semilogy([6:length(tROM)],tFOM ./ tROM(6:end),'o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{t_{FOM}}{t_{ROM}}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Computational speedup','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square

% Save figures
mkdir('archive_sim');
folder_name = strcat('archive_sim',sslash,'SS_reduction-',mesh_name);
mkdir(folder_name);

    
for jj=1:length(fig)

    name_tmp_jj = strcat(folder_name,sslash,fig(jj).Name,'.png');
    exportgraphics(fig(jj),name_tmp_jj);
    
end 


% % Save txt file with parameters of simulation
% 
% %generate report txt file
file_id = fopen(strcat(folder_name,sslash,'report','.txt'),'w')


fprintf(file_id,'################################### \n');
fprintf(file_id,'\n');
fprintf(file_id,'PARAMETERS MU TEST \n');
fprintf(file_id,'mu1 = %d, mu2 =%d , mu3 = %d , mu4 =%d \n ',mu_test);
fprintf(file_id,'Train dimension N = %d \n ',mu_train_Dimension);
fprintf(file_id,'Training time     = %d seconds\n ',train_Time);
fprintf(file_id,'################################### \n');
fprintf(file_id,'\n');
fprintf(file_id,'DATA \n');
fprintf(file_id,'track_error_FOM = %d \n ',full(track_error_FOM));
fprintf(file_id,'track_error_FOM uncontrolled = %d \n ',full(track_error_FOM_free));
fprintf(file_id,'MTE_unc = %d MTE_opt = %d eta_cloak = %d \n ',full([MTE_unc MTE_opt eta_cloak]));
fprintf(file_id,'Solution time FOM = %d , ROM = %d , speedup = %d \n ',[tFOM, tROM(end) , tFOM / tROM(end)]);

fprintf(file_id,'################################### \n');
fprintf(file_id,'\n');
fprintf(file_id,'ROM \n');
fprintf(file_id,'################################### \n');
fprintf(file_id,evalc('disp(ROM)'));
fprintf(file_id,'################################### \n');

fprintf(file_id,'################################### \n');
fprintf(file_id,'\n');
fprintf(file_id,'FOM \n');
fprintf(file_id,'################################### \n');
fprintf(file_id,evalc('disp(FOM)'));
fprintf(file_id,'################################### \n');

