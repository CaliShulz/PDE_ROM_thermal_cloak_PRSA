function [] = T_reduction_tests(mesh_name)

%% T_reduction_tests.m

% need data structure generated by T_reduction
% Test ROM for user selected samples of input parameter set

% save figures and report.txt in archive_sim folder


sslash = path_setup() ; % setup path 
load(strcat('archive_data',sslash,'T_ROM_vs_FOM_',mesh_name));

FOM   = to_save.FOM    ;
ROM   = to_save.ROM    ;
param = to_save.param  ;

clear to_save

% Test cases to assess ROM perfomance 
mu_tests = [ 3 7500    40 1E-10 ; ...
             2 10000   70 1E-10 ; ...
             4 1000     0 1E-10 ; ]

N_tests = size(mu_tests,1); 

u_error_n_stack = [];
q_error_n_stack = [];
p_error_n_stack = [];
z_error_n_stack = [];
J_error_n_stack = [];


for tt = 1:mu_tests
    
    mu_test = mu_tests(tt,:);
    
    
    % Solve steady-state problem for adjoint final condition
    [z_SS,q_SS,p_SS,u_SS,J_SS,FOM] = solve_HF_OCP_SS(mu_test,FOM);

    tic;
    [z , q_opt_in , p_opt_in , u_opt_in , J] = solve_HF_OCP(mu_test,FOM,param);
    tFOM = toc;

    % save test case
    test_case.mu_test = mu_test;
    test_case.FOM.z   = z;
    test_case.FOM.q   = q_opt_in;
    test_case.FOM.p   = p_opt_in;
    test_case.FOM.u   = u_opt_in;
    test_case.FOM.J   = J;
    test_case.FOM.t   = tFOM;
    
    
    % Time Online Phase
    tic;
    % Solve Reduced SS problem
    [z_SS,q_SS,p_SS,u_SS,J_SS,ROM] = solve_HF_OCP_SS(mu_test,ROM);         % solve ROM steady-state
    [z_ref , q_opt, p_opt , u_opt , J] = solve_HF_OCP(mu_test,ROM,param);  % solve ROM transient
    tROM = toc;

    [~,N_pq_ROM]  = size(ROM.V_pq);
    [~,N_ref_ROM] = size(ROM.V_ref);
    [~,N_u_ROM]   = size(ROM.V_u);

    test_case.ROM.z = z_ref;
    test_case.ROM.q = q_opt;
    test_case.ROM.p = p_opt;
    test_case.ROM.u = u_opt;

    %% Error analysis varying basis dimension
    u_error_n = [];
    q_error_n = [];
    p_error_n = [];
    z_error_n = [];
    J_error_n = [];

    tROM          = [];

    q_FOM = test_case.FOM.q;
    z_FOM = test_case.FOM.z;
    u_FOM = test_case.FOM.u;

    delta_q      = q_FOM - FOM.E*z_FOM;
    running_cost = 0.5 * ( FOM.alfa_R * diag( delta_q' * FOM.M_obs * delta_q ) + ...
                           FOM.beta   * diag( u_FOM'       * FOM.M_u   * u_FOM       ) + ...
                           FOM.beta_g * diag( u_FOM'       * FOM.A_u   * u_FOM       ));
    J_FOM = trapz(running_cost)*param.dt;

    for jj = 1:max([N_pq_ROM,N_ref_ROM,N_u_ROM])
        V_N.V_u   = ROM.V_u(:,1:min([N_u_ROM,jj]));
        V_N.V_pq  = ROM.V_pq(:,1:min([N_pq_ROM,jj]));
        V_N.V_ref = ROM.V_ref(:,1:min([N_ref_ROM,jj]));

        [ROM] = project_system_RB(V_N,ROM,FOM);

        % Time Online Phase
        tic;
        [z_SS,q_SS,p_SS,u_SS,J_SS,ROM] = solve_HF_OCP_SS(mu_test,ROM);
        [z_ref , q_opt, p_opt , u_opt , J] = solve_HF_OCP(mu_test,ROM,param);
        tROM = [ tROM toc];


        delta_q      = q_opt - ROM.E*z_ref;
        running_cost = 0.5 * ( FOM.alfa_R * diag( delta_q' * ROM.M_obs * delta_q ) + ...
                           FOM.beta   * diag( u_opt'       * ROM.M_u   * u_opt       ) + ...
                           FOM.beta_g * diag( u_opt'       * ROM.A_u   * u_opt       ));
        J_ROM = trapz(running_cost)*param.dt;

        J_error_rel = abs(J_ROM-J_FOM) / J_FOM;

        dt = param.dt;
        z_norm_FOM =trapz(diag(transpose(test_case.FOM.z) * FOM.M      * test_case.FOM.z))*dt;
        q_norm_FOM =trapz(diag(transpose(test_case.FOM.q) * FOM.M_ocp  * test_case.FOM.q))*dt;
        p_norm_FOM =trapz(diag(transpose(test_case.FOM.p) * FOM.M_ocp  * test_case.FOM.p))*dt;
        u_norm_FOM =trapz(diag(transpose(test_case.FOM.u) * FOM.M_u    * test_case.FOM.u))*dt;



        z_error = trapz(diag(transpose(test_case.FOM.z - V_N.V_ref * z_ref) * FOM.M      * (test_case.FOM.z - V_N.V_ref * z_ref)))*dt;
        q_error = trapz(diag(transpose(test_case.FOM.q - V_N.V_pq  * q_opt) * FOM.M_ocp  * (test_case.FOM.q - V_N.V_pq  * q_opt)))*dt;
        p_error = trapz(diag(transpose(test_case.FOM.p - V_N.V_pq  * p_opt) * FOM.M_ocp  * (test_case.FOM.p - V_N.V_pq  * p_opt)))*dt;
        u_error = trapz(diag(transpose(test_case.FOM.u - V_N.V_u   * u_opt) * FOM.M_u    * (test_case.FOM.u - V_N.V_u   * u_opt)))*dt;

        u_error_rel = u_error / u_norm_FOM;
        q_error_rel = q_error / q_norm_FOM;
        p_error_rel = p_error / p_norm_FOM;
        z_error_rel = z_error / z_norm_FOM;

        u_error_n = [u_error_n u_error_rel];
        q_error_n = [q_error_n q_error_rel];
        p_error_n = [p_error_n p_error_rel];
        z_error_n = [z_error_n z_error_rel];
        J_error_n = [J_error_n J_error_rel];

    end

u_error_n_stack = [u_error_n_stack ; u_error_n];
q_error_n_stack = [q_error_n_stack ; q_error_n];
p_error_n_stack = [p_error_n_stack ; p_error_n];
z_error_n_stack = [z_error_n_stack ; z_error_n];
J_error_n_stack = [J_error_n_stack ; J_error_n];

end

%%

% Setup fonts for plots
font_label = 18;
font_title = 19;
font_legend = 10;


fonts_data.font_title = font_title;
fonts_data.font_label = font_label;

% Setup figures
fig = gobjects(0);
set(0,'DefaultFigureVisible','on');



% State reduction error
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "state_rom_fom_tests";
semilogy(q_error_n_stack','o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{||\mathbf{q}_h - V_{pq} \mathbf{q}_N ||}{||\mathbf{q}_h ||}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('State reduction error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square

% Control reduction error
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "control_rom_fom_tests";
semilogy(u_error_n_stack','o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{||\mathbf{u}_h - V_{u} \mathbf{u}_N ||}{||\mathbf{u}_h ||}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Control reduction error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square


% Adjoint reduction error
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "adjoint_rom_fom_tests";
semilogy(p_error_n_stack','o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{||\mathbf{p}_h - V_{pq} \mathbf{p}_N ||}{||\mathbf{p}_h ||}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Adjoint reduction error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square

% Reference reduction error
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "ref_rom_fom_tests";
semilogy(z_error_n_stack','o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{||\mathbf{z}_h - V_{r} \mathbf{z}_N ||_{M}^2}{||\mathbf{z}_h ||_{M}^2}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Reference reduction error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square

% Cost reduction error

fig(length(fig)+1) = figure;
fig(length(fig)).Name = "cost_error_rom_fom_tests";
semilogy(J_error_n_stack','o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{J_{ROM} - J_{FOM}}{J_{FOM}}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Cost reduction error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square

tFOM = test_case.FOM.t;
% Computational Speedup
fig(length(fig)+1) = figure;
fig(length(fig)).Name = "speedup_rom_fom_tests";
semilogy(10:length(tROM),tFOM ./ tROM(10:end),'o--')
grid('minor');
label_temp = xlabel('N','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ \frac{t_{FOM}}{t_{ROM}}  $','interpreter','latex');
set(label_temp,'FontSize',font_label);
title_temp = title('Computational speedup','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on
axis square


% Save figures
name_sim = strcat('archive_sim',sslash,'T_ROM_vs_FOM_',mesh_name);

folder_name = name_sim;
mkdir(folder_name);    
for jj=1:length(fig)

    name_tmp_jj = strcat(pwd,sslash,folder_name,sslash,fig(jj).Name,'.png');
    exportgraphics(fig(jj),name_tmp_jj);
    
end 



% % Save txt file with parameters of simulation
% 
% %generate report txt file
file_id = fopen(strcat(pwd,sslash,folder_name,sslash,'report','.txt'),'w')

fprintf(file_id,'################################### \n');
fprintf(file_id,'\n');
fprintf(file_id,'PARAMETERS MU TEST \n');
fprintf(file_id,'mu1 = %d, mu2 =%d , mu3 = %d , mu4 =%d \n ',mu_test);
fprintf(file_id,'Train dimension N = %d \n ',size(FOM.mu_train,1));
fprintf(file_id,'Solution time FOM = %d , ROM = %d , speedup = %d \n ',[tFOM, tROM(end) , tFOM / tROM(end)]);

fprintf(file_id,'################################### \n');
fprintf(file_id,'\n');
fprintf(file_id,'TIME PARAMETERS \n');
fprintf(file_id,evalc('disp(param)'));

fprintf(file_id,'################################### \n');
fprintf(file_id,'\n');
fprintf(file_id,'ROM \n');
fprintf(file_id,'################################### \n');
fprintf(file_id,evalc('disp(ROM)'));
fprintf(file_id,'################################### \n');

fprintf(file_id,'################################### \n');
fprintf(file_id,'\n');
fprintf(file_id,'FOM \n');
fprintf(file_id,'################################### \n');
fprintf(file_id,evalc('disp(FOM)'));
fprintf(file_id,'################################### \n');

end