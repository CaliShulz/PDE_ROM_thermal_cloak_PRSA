%   This file is part of redbKIT.
%   Copyright (c) 2016, Ecole Polytechnique Federale de Lausanne (EPFL)
%   Author: Federico Negri <federico.negri at epfl.ch> 

clear all
clc

syms U u1 u2 u3 F u1x u1y u1z u2x u2y u2z u3x u3y u3z f1x f1y f1z f2x f2y f2z f3x f3y f3z v1x v1y v1z v2x v2y v2z v3x v3y v3z cof1x cof1y cof1z cof2x cof2y cof2z cof3x cof3y cof3z

syms mu bulk I_C pow23J pow2J logJ

D = [u1; u2; u3];

F = [f1x f1y f1z; f2x f2y f2z; f3x f3y f3z];

syms J


GradU = [u1x u1y u1z; u2x u2y u2z; u3x u3y u3z];

GradV = [v1x v1y v1z; v2x v2y v2z; v3x v3y v3z];

FT = F.';

%CofF = J^(-1) * inv(FT);
invFT =  [cof1x cof1y cof1z; cof2x cof2y cof2z; cof3x cof3y cof3z];

% All
DF =    - 2/3 * mu * pow23J * sum(sum(invFT.*GradU))*F ...
        + 2/9 * mu *  pow23J * I_C * sum(sum(invFT.*GradU))*invFT ...
        - 2/3 * mu * pow23J * sum(sum(F.*GradU))*invFT ...
        +       mu * pow23J * GradU ...
        + 1/3 * mu * pow23J * I_C * invFT * GradU.' * invFT ...
        + bulk * 0.5 * (2 * pow2J - J + 1) * sum(sum(invFT.*GradU))*invFT ...
        + bulk * 0.5 * (J - pow2J - logJ) * invFT * GradU.' * invFT;


% DF =        mu * pow23J * GradU...
%           + bulk * 0.5 * (2 * pow2J - J + 1) * sum(sum(invFT.*GradU))*invFT ...
%           + bulk * 0.5 * (J - pow2J - logJ) * invFT * GradU.' * invFT;

integral = sum(sum(DF.*GradV));


pos2der = {'x', 'y', 'z'};

for i = 1 : 3 % test
    for j = 1 : 3 % trial
        A{i,j} = integral;
        
        for ii = 1 : 3
            if ii ~= i
                for d = 1 : 3
                    variable = sprintf('v%d%s',ii,pos2der{d});
                    eval( ['A{i,j} = subs(A{i,j},', variable,', 0);'] );
                end
            end
        end
        
        for jj = 1 : 3
            if jj ~= j
                for d = 1 : 3
                    variable = sprintf('u%d%s',jj,pos2der{d});
                    eval( ['A{i,j} = subs(A{i,j},', variable,', 0);'] );
                end
            end
        end
        
    end
end

TableSubs = {'J', 'detF[q]';...
             'I_C', 'I_C[q]';...
             'pow23J', 'pow23detF[q]';...
             'pow2J', 'pow2detF[q]'; ...
             'logJ', 'logdetF[q]';...
             'cof1x', 'invFT[q][0][0]';...
             'cof1y', 'invFT[q][0][1]';...
             'cof1z', 'invFT[q][0][2]';...
             'cof2x', 'invFT[q][1][0]';...
             'cof2y', 'invFT[q][1][1]';...
             'cof2z', 'invFT[q][1][2]';...
             'cof3x', 'invFT[q][2][0]';...
             'cof3y', 'invFT[q][2][1]';...
             'cof3z', 'invFT[q][2][2]';...
             'f1x', 'F[q][0][0]';...
             'f1y', 'F[q][0][1]';...
             'f1z', 'F[q][0][2]';...
             'f2x', 'F[q][1][0]';...
             'f2y', 'F[q][1][1]';...
             'f2z', 'F[q][1][2]';...
             'f3x', 'F[q][2][0]';...
             'f3y', 'F[q][2][1]';...
             'f3z', 'F[q][2][2]';...
             'u1x', 'gradphi[q][0][b]';...
             'u1y', 'gradphi[q][1][b]';...
             'u1z', 'gradphi[q][2][b]';...
             'u2x', 'gradphi[q][0][b]';...
             'u2y', 'gradphi[q][1][b]';...
             'u2z', 'gradphi[q][2][b]';...
             'u3x', 'gradphi[q][0][b]';...
             'u3y', 'gradphi[q][1][b]';...
             'u3z', 'gradphi[q][2][b]';...
             'v1x', 'gradphi[q][0][a]';...
             'v1y', 'gradphi[q][1][a]';...
             'v1z', 'gradphi[q][2][a]';...
             'v2x', 'gradphi[q][0][a]';...
             'v2y', 'gradphi[q][1][a]';...
             'v2z', 'gradphi[q][2][a]';...
             'v3x', 'gradphi[q][0][a]';...
             'v3y', 'gradphi[q][1][a]';...
             'v3z', 'gradphi[q][2][a]';...
             'invFT[q][0][0]^2', 'invFT[q][0][0]*invFT[q][0][0]';...
             'invFT[q][0][1]^2', 'invFT[q][0][1]*invFT[q][0][1]';...
             'invFT[q][0][2]^2', 'invFT[q][0][2]*invFT[q][0][2]';...
             'invFT[q][1][0]^2', 'invFT[q][1][0]*invFT[q][1][0]';...
             'invFT[q][1][1]^2', 'invFT[q][1][1]*invFT[q][1][1]';...
             'invFT[q][1][2]^2', 'invFT[q][1][2]*invFT[q][1][2]';...
             'invFT[q][2][0]^2', 'invFT[q][2][0]*invFT[q][2][0]';...
             'invFT[q][2][1]^2', 'invFT[q][2][1]*invFT[q][2][1]';...
             'invFT[q][2][2]^2', 'invFT[q][2][2]*invFT[q][2][2]';...
             '/3', '/3.0';...
             '/2', '/2.0';...
             '/9', '/9.0'};

for i = 1 : 3 % test
    for j = 1 : 3 % trial
        
        B{i,j} = A{i,j};
        fprintf('\n',i,j);%** Block %d%d ** \n
        
        
        fprintf('\naloc[a][%d][b][%d] += ( ',i-1,j-1);
        sA = size(B{i,j});
        for row=1:sA(1)
            for col = 1:sA(2)
                
                str2 = char(B{i,j}(row,col));
                
                for kk = 1 : size(TableSubs, 1)
                   
                    str2 = strrep(str2, TableSubs{kk,1}, TableSubs{kk,2});
                    
                end
                
                fprintf('%s ) * w[q]',str2);
            end
            %    fprintf(fid,';...\n');
        end
        fprintf(';');
        %fprintf('\niii = iii + 1;')
        
    end
end
fprintf('\n\n');
