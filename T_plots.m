function [] = T_plots(mesh_name)

%% T_plots.m

% Need data generated by T_reduction

% Generate video and figures for selected mesh, these are saved in
% archive_sim folder



sslash = path_setup() ; % setup path 

load(strcat('archive_data',sslash,'T_ROM_vs_FOM_',mesh_name));

folder_name = strcat('archive_sim',sslash,'T_ROM_vs_FOM_',mesh_name);

% Setup videos
video_reference_FOM      = setup_video(strcat(folder_name,sslash,"video_reference_fom"));
video_reference_ROM      = setup_video(strcat(folder_name,sslash,"video_reference_rom"));

video_obstacle           = setup_video(strcat(folder_name,sslash,"video_obstacle"));

video_controlled_FOM     = setup_video(strcat(folder_name,sslash,"video_controlled_fom"));
video_controlled_ROM     = setup_video(strcat(folder_name,sslash,"video_controlled_rom"));

video_control_FOM        = setup_video(strcat(folder_name,sslash,"video_control_fom"));
video_control_ROM        = setup_video(strcat(folder_name,sslash,"video_control_rom"));

video_tracking_FOM       = setup_video(strcat(folder_name,sslash,"video_tracking_fom"));
video_tracking_ROM       = setup_video(strcat(folder_name,sslash,"video_tracking_rom"));

% Load simulation ROM vs FOM
FOM       = to_save.FOM;
ROM       = to_save.ROM;
test_case = to_save.test_case;
param     = to_save.param;

clear to_save 

% Setup fonts for plots
font_label = 18;
font_title = 19;
font_legend = 10;


fonts_data.font_title = font_title;
fonts_data.font_label = font_label;

% Setup figures
fig = gobjects(0);
set(0,'DefaultFigureVisible','off');
warning('off')

dimt  = param.dimt;
dt    = param.dt;


MESH         = FOM.MESH;
vertices     = MESH.vertices;
elements     = MESH.elements;

z_ref_ROM    = ROM.V_ref*test_case.ROM.z;
z_ref_FOM    = test_case.FOM.z;

q_dir    = FOM.T_dir*ones(length(vertices),dimt);   % Dirichlet datum at each node  

q_opt_FOM    = q_dir;
q_opt_ROM    = q_dir;

q_opt_FOM(FOM.nodes_ocp_in,:) = test_case.FOM.q;
q_opt_ROM(FOM.nodes_ocp_in,:) = ROM.V_pq * test_case.ROM.q;

u_opt_FOM(FOM.control_basis_index,:)    = test_case.FOM.u;
u_opt_ROM(FOM.control_basis_index,:)    = ROM.V_u * test_case.ROM.u;

V_pq     = ROM.V_pq;
V_u      = ROM.V_u;



% % Reference data
reference_data.name = "reference_fom";
reference_data.y    = z_ref_FOM;
reference_data.mesh = MESH;

reference_plot_data.dt     = dt;
reference_plot_data.limits = [min(z_ref_FOM(:)) max(z_ref_FOM(:))];
reference_plot_data.title  = "Reference (FOM)";

ROM_reference_data.name = "reference_rom";
ROM_reference_data.y    = z_ref_ROM;
ROM_reference_data.mesh = MESH;

ROM_reference_plot_data.dt     = dt;
ROM_reference_plot_data.limits = [min(z_ref_FOM(:)) max(z_ref_FOM(:))];
ROM_reference_plot_data.title  = "Reference (ROM)";

% Obstacle data (uncontrolled)
[state_elements,state_boundaries] = get_reduced_mesh(FOM.MESH,FOM.nodes_ocp);
FOM_unc_state_data.reduced.vertices     = MESH.vertices(:,FOM.nodes_ocp);
FOM_unc_state_data.reduced.elements     = state_elements; 
FOM_unc_state_data.reduced.indexes      = FOM.nodes_ocp;

FOM_unc_state_data.name                = "unc_state_FOM";
q_uncontrolled                     = q_dir;


[FOM] = evaluate_theta_terms(test_case.mu_test,FOM);
[FOM] = assemble_ato_SS(FOM);
FOM.q0      = zeros(length(FOM.nodes_ocp_in),1);
FOM.M   = FOM.M_ocp;
FOM.A   = FOM.A_d_ocp+FOM.A_d_robin_ocp;
FOM.F   = FOM.F_ocp + FOM.F_dir;
q_uncontrolled_in                  = integrate_state(0*test_case.FOM.u,param,FOM,1);
q_uncontrolled(FOM.nodes_ocp_in,:) = q_uncontrolled_in;


FOM_unc_state_data.y                   = q_uncontrolled;

FOM_unc_state_plot_data.dt    = dt;
FOM_unc_state_plot_data.limits = [min([z_ref_FOM(:) ; q_uncontrolled(:)]) max([z_ref_FOM(:) ; q_uncontrolled(:)])];
FOM_unc_state_plot_data.title = "Uncontrolled State";


% Obstacle data (controlled)
FOM_state_data = FOM_unc_state_data;
FOM_state_data.name       = "state_FOM";
FOM_state_data.y          = q_opt_FOM;

FOM_state_plot_data       = FOM_unc_state_plot_data;
FOM_state_plot_data.title = "State (FOM)";


ROM_state_data            = FOM_state_data;
ROM_state_data.name       = "state_ROM";
ROM_state_data.y          = q_opt_ROM;

ROM_state_plot_data       = FOM_state_plot_data;
ROM_state_plot_data.title = "State (ROM)";

% Control field
FOM_control_data.name = "control_fom";
FOM_control_data.y    = u_opt_FOM;
FOM_control_data.mesh = MESH;

control_plot_data = reference_plot_data;
control_plot_data.title = "Control (FOM)";
control_plot_data.limits = [min(test_case.FOM.u(:)) max(test_case.FOM.u(:))];

% Control lives on a reduced mesh, get reduced mesh
control_basis_index = FOM.control_basis_index;
[reduced_control_elements,~] = get_reduced_mesh(MESH,control_basis_index);
FOM_control_data.reduced.vertices     = MESH.vertices(:,control_basis_index);
FOM_control_data.reduced.elements     = reduced_control_elements; 
FOM_control_data.reduced.indexes      = control_basis_index;


ROM_control_data      = FOM_control_data;
ROM_control_data.name = "control_rom";
ROM_control_data.y    = u_opt_ROM;

ROM_control_plot_data = control_plot_data;
ROM_control_plot_data.title = "Control (ROM)";



r_control_ext = 0.4;
r_control_in  = 0.3;
r_obs         = 0.2;



% Tracking error 

% FOM
tracking_error_field   = test_case.FOM.q - FOM.E * test_case.FOM.z;

FOM_tracking_data.name = "tracking FOM";
tracking_error_small   = FOM.E_obs * tracking_error_field;
y_temp                 = zeros(length(MESH.vertices),param.dimt);
y_temp(FOM.observation_basis_index,:) = tracking_error_small;
FOM_tracking_data.y    = y_temp;
% 
FOM_tracking_plot_data.dt = dt;
FOM_tracking_plot_data.title  = "Tracking error (FOM)";
symmetric_lim = max(abs(tracking_error_small(:)));
FOM_tracking_plot_data.limits = [-symmetric_lim symmetric_lim];
% 
% % Observation mesh
% 
[reduced_observation_elements]         = get_reduced_mesh(MESH,FOM.observation_basis_index);
FOM_tracking_data.reduced.vertices     = MESH.vertices(:,FOM.observation_basis_index);
FOM_tracking_data.reduced.elements     = reduced_observation_elements; 
FOM_tracking_data.reduced.indexes      = FOM.observation_basis_index;

% ROM

ROM_tracking_data      = FOM_tracking_data;
ROM_tracking_data.name = "tracking ROM";
y_temp(FOM.observation_basis_index,:) = FOM.E_obs * ( ROM.V_pq*test_case.ROM.q - FOM.E * ROM.V_ref*test_case.ROM.z);
ROM_tracking_data.y    = y_temp;

ROM_tracking_plot_data       = FOM_tracking_plot_data;
ROM_tracking_plot_data.title = "Tracking error (ROM)";

% Energy norms in time ROM vs FOM


time_vect = linspace(0,param.T,dimt);  
tracking_error_norm_FOM    = diag(tracking_error_field' * FOM.M_obs * tracking_error_field);
delta_q_ROM                = ( ROM.V_pq*test_case.ROM.q - FOM.E * ROM.V_ref*test_case.ROM.z);
tracking_error_norm_ROM    = diag(delta_q_ROM' * FOM.M_obs * delta_q_ROM);

fig(length(fig)+1) = figure;
fig(length(fig)).Name = "tracking_rom_fom";
plot(time_vect,tracking_error_norm_FOM,'b','Linewidth',2)
hold on
plot(time_vect,tracking_error_norm_ROM,'--r','Linewidth',2);
grid('minor');
label_temp = xlabel('Time [s]','interpreter','latex');
set(label_temp,'FontSize',font_label);
label_temp = ylabel('$ ||\mathbf{q} - E \mathbf{z} ||_{M_o}  $','interpreter','latex');
legend_temp = legend({'FOM','ROM'},'interpreter','latex','Location','Best');
set(legend_temp,'FontSize',font_legend);
set(label_temp,'FontSize',font_label);
title_temp = title('Tracking error','interpreter','latex');
set(title_temp,'FontSize',font_title);
grid on



for tt=1:5:dimt
    
    % Reference Plot
    fig(length(fig)+1)     = figure;
    reference_plot_data.tt = tt;
    [fig] = plot_field(fig,reference_data,reference_plot_data,fonts_data);
    frame = getframe(gcf);
    writeVideo(video_reference_FOM,frame);
    
    fig(length(fig)+1)     = figure;
    ROM_reference_plot_data.tt = tt;
    [fig] = plot_field(fig,ROM_reference_data,ROM_reference_plot_data,fonts_data);
    frame = getframe(gcf);
    writeVideo(video_reference_ROM,frame);
    
    % Uncontrolled System ( it is not reduced)
    fig(length(fig)+1)     = figure;
    FOM_unc_state_plot_data.tt = tt;
    [fig] = plot_field(fig,FOM_unc_state_data,FOM_unc_state_plot_data,fonts_data);
    frame = getframe(gcf);
    writeVideo(video_obstacle,frame);
    
    % Controlled System
    fig(length(fig)+1)     = figure;
    FOM_state_plot_data.tt = tt;
    [fig] = plot_field(fig,FOM_state_data,FOM_state_plot_data,fonts_data);
    frame = getframe(gcf);
    writeVideo(video_controlled_FOM,frame);
    
    
    fig(length(fig)+1)     = figure;
    ROM_state_plot_data.tt = tt;
    [fig] = plot_field(fig,ROM_state_data,ROM_state_plot_data,fonts_data);
    frame = getframe(gcf);
    writeVideo(video_controlled_ROM,frame);
    
    % Control field
    fig(length(fig)+1)     = figure;
    control_plot_data.tt = tt;
    [fig] = plot_field(fig,FOM_control_data,control_plot_data,fonts_data) ;  
    hold on
    
    
    switch FOM.name

        case 'circular'
            get_grey_plate(0.2);
        case 'disconnected'
            get_grey_plate(0.2);
        case 'boar'
            get_grey_scrofa(FOM.shape.obs_vert)

    end
    
    
    frame = getframe(gcf);
    writeVideo(video_control_FOM,frame);
    
    fig(length(fig)+1)     = figure;
    ROM_control_plot_data.tt = tt;
    [fig] = plot_field(fig,ROM_control_data,ROM_control_plot_data,fonts_data) ;  
    hold on
    
    
    switch FOM.name

        case 'circular'
            get_grey_plate(0.2);
        case 'disconnected'
            get_grey_plate(0.2);
        case 'boar'
            get_grey_scrofa(FOM.shape.obs_vert)

    end
    
    
    frame = getframe(gcf);
    writeVideo(video_control_ROM,frame);
    

    
    % Tracking error field
    fig(length(fig)+1)     = figure;
    FOM_tracking_plot_data.tt = tt;
    [fig] = plot_field(fig,FOM_tracking_data,FOM_tracking_plot_data,fonts_data) ;
    hold on
    
    
    switch FOM.name

        case 'circular'
            get_grey_obs(0.4,0.2);
        case 'disconnected'
            get_grey_obs(0.4,0.2);
        case 'boar'
            get_grey_obs_scrofa(FOM.shape.outer_vert,FOM.shape.obs_vert);

    end
    
    
    frame = getframe(gcf);
    
    writeVideo(video_tracking_FOM,frame); 
    
    
    fig(length(fig)+1)     = figure;
    ROM_tracking_plot_data.tt = tt;
    [fig] = plot_field(fig,ROM_tracking_data,ROM_tracking_plot_data,fonts_data) ;
    hold on
    
    
    switch FOM.name
    
        case 'circular'
            get_grey_obs(0.4,0.2);
        case 'disconnected'
            get_grey_obs(0.4,0.2);
        case 'boar'
            get_grey_obs_scrofa(FOM.shape.outer_vert,FOM.shape.obs_vert);
        
    end
    
    frame = getframe(gcf);
    
    writeVideo(video_tracking_ROM,frame); 
    
    
end

close(video_reference_FOM);
close(video_reference_ROM);

close(video_obstacle);

close(video_controlled_FOM);
close(video_controlled_ROM);

close(video_control_FOM);
close(video_control_ROM);

close(video_tracking_FOM);
close(video_tracking_ROM);


mkdir(strcat(folder_name,sslash,"figures"));

for jj=1:length(fig)

    name_tmp_jj = strcat(pwd,sslash,folder_name,sslash,"figures",sslash,fig(jj).Name,'.png');
    exportgraphics(fig(jj),name_tmp_jj);
end


% stack videos using fmmpeg (you need ffmpeg)
try
    
    main_folder = pwd;
    
    cd(folder_name)
    
    % tracking ROM vs FOM
    system('ffmpeg -i video_tracking_fom.avi -i video_tracking_rom.avi -filter_complex vstack=inputs=2 tracking_stack.mp4');
    
    % Reference vs Controlled vs Uncontrolled
    system('ffmpeg -i video_reference_fom.avi -i video_controlled_fom.avi -i video_obstacle.avi -filter_complex hstack=inputs=3 obstacle_stack.mp4');
    
    % ROM vs FOM reference/state/control
    stack_32_str = strcat('ffmpeg -i video_reference_fom.avi  -i video_controlled_fom.avi       -i video_control_fom.avi -i video_reference_rom.avi  -i video_controlled_rom.avi       -i video_control_rom.avi ', ...
                          ' -filter_complex "[0:v][1:v][2:v]hstack=inputs=3[top]; [3:v][4:v][5:v]hstack=inputs=3[bottom]; [top][bottom]vstack=inputs=2[v]"' , ...
                          ' -map "[v]" ROM_vs_FOM_stacked.mp4 ' ); 
    system(stack_32_str);
    
    cd(main_folder);

catch
    
    fprintf(" ffmpeg needed to stack videos together ");
    
end


end

function [video_object] = setup_video(name_video)

video_object = VideoWriter(name_video);
video_object.FrameRate = 4;
open(video_object);

end